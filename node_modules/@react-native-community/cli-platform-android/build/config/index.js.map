{"version":3,"sources":["../../src/config/index.ts"],"names":["projectConfig","root","userConfig","src","sourceDir","path","join","appName","getAppName","manifestPath","buildGradlePath","packageName","Error","dependencyConfiguration","userConfigAppName","fs","existsSync","dependencyConfig","packageClassName","packageImportPath","packageInstance","buildTypes","libraryName","componentDescriptors","androidMkPath","cmakeListsPath","process","platform","replace"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport findAndroidDir from './findAndroidDir';\nimport findManifest from './findManifest';\nimport findPackageClassName from './findPackageClassName';\nimport {\n  AndroidProjectParams,\n  AndroidProjectConfig,\n  AndroidDependencyParams,\n  AndroidDependencyConfig,\n} from '@react-native-community/cli-types';\nimport {getPackageName} from './getAndroidProject';\nimport {findLibraryName} from './findLibraryName';\nimport {findComponentDescriptors} from './findComponentDescriptors';\nimport {findBuildGradle} from './findBuildGradle';\n\n/**\n * Gets android project config by analyzing given folder and taking some\n * defaults specified by user into consideration\n */\nexport function projectConfig(\n  root: string,\n  userConfig: AndroidProjectParams = {},\n): AndroidProjectConfig | null {\n  const src = userConfig.sourceDir || findAndroidDir(root);\n\n  if (!src) {\n    return null;\n  }\n\n  const sourceDir = path.join(root, src);\n\n  const appName = getAppName(sourceDir, userConfig.appName);\n\n  const manifestPath = userConfig.manifestPath\n    ? path.join(sourceDir, userConfig.manifestPath)\n    : findManifest(path.join(sourceDir, appName));\n  const buildGradlePath = findBuildGradle(sourceDir, false);\n\n  if (!manifestPath && !buildGradlePath) {\n    return null;\n  }\n\n  const packageName =\n    userConfig.packageName || getPackageName(manifestPath, buildGradlePath);\n\n  if (!packageName) {\n    throw new Error(\n      `Package name not found in neither ${manifestPath} nor ${buildGradlePath}`,\n    );\n  }\n\n  return {\n    sourceDir,\n    appName,\n    packageName,\n    dependencyConfiguration: userConfig.dependencyConfiguration,\n  };\n}\n\nfunction getAppName(sourceDir: string, userConfigAppName: string | undefined) {\n  let appName = '';\n  if (\n    typeof userConfigAppName === 'string' &&\n    fs.existsSync(path.join(sourceDir, userConfigAppName))\n  ) {\n    appName = userConfigAppName;\n  } else if (fs.existsSync(path.join(sourceDir, 'app'))) {\n    appName = 'app';\n  }\n  return appName;\n}\n\n/**\n * Same as projectConfigAndroid except it returns\n * different config that applies to packages only\n */\nexport function dependencyConfig(\n  root: string,\n  userConfig: AndroidDependencyParams | null = {},\n): AndroidDependencyConfig | null {\n  if (userConfig === null) {\n    return null;\n  }\n\n  const src = userConfig.sourceDir || findAndroidDir(root);\n\n  if (!src) {\n    return null;\n  }\n\n  const sourceDir = path.join(root, src);\n  const manifestPath = userConfig.manifestPath\n    ? path.join(sourceDir, userConfig.manifestPath)\n    : findManifest(sourceDir);\n  const buildGradlePath = findBuildGradle(sourceDir, true);\n\n  if (!manifestPath && !buildGradlePath) {\n    return null;\n  }\n\n  const packageName =\n    userConfig.packageName || getPackageName(manifestPath, buildGradlePath);\n  const packageClassName = findPackageClassName(sourceDir);\n\n  /**\n   * This module has no package to export\n   */\n  if (!packageClassName) {\n    return null;\n  }\n\n  const packageImportPath =\n    userConfig.packageImportPath ||\n    `import ${packageName}.${packageClassName};`;\n\n  const packageInstance =\n    userConfig.packageInstance || `new ${packageClassName}()`;\n\n  const buildTypes = userConfig.buildTypes || [];\n  const dependencyConfiguration = userConfig.dependencyConfiguration;\n  const libraryName =\n    userConfig.libraryName || findLibraryName(root, sourceDir);\n  const componentDescriptors =\n    userConfig.componentDescriptors || findComponentDescriptors(root);\n  const androidMkPath = userConfig.androidMkPath\n    ? path.join(sourceDir, userConfig.androidMkPath)\n    : path.join(sourceDir, 'build/generated/source/codegen/jni/Android.mk');\n  let cmakeListsPath = userConfig.cmakeListsPath\n    ? path.join(sourceDir, userConfig.cmakeListsPath)\n    : path.join(sourceDir, 'build/generated/source/codegen/jni/CMakeLists.txt');\n  if (process.platform === 'win32') {\n    cmakeListsPath = cmakeListsPath.replace(/\\\\/g, '/');\n  }\n  return {\n    sourceDir,\n    packageImportPath,\n    packageInstance,\n    buildTypes,\n    dependencyConfiguration,\n    libraryName,\n    componentDescriptors,\n    androidMkPath,\n    cmakeListsPath,\n  };\n}\n"]}