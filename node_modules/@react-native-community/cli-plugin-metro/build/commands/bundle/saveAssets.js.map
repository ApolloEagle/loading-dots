{"version":3,"sources":["../../../src/commands/bundle/saveAssets.ts"],"names":["saveAssets","assets","platform","assetsDest","assetCatalogDest","logger","warn","filesToCopy","Object","create","getAssetDestPath","getAssetDestPathAndroid","getAssetDestPathIOS","addAssetToCopy","asset","validScales","Set","scales","forEach","scale","idx","has","src","files","dest","path","join","catalogDir","fs","existsSync","error","info","imageSet","copyAll","queue","keys","length","Promise","resolve","reject","copyNext","shift","copy","callback","destDir","dirname","mkdir","recursive","err","createReadStream","pipe","createWriteStream","on"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {logger} from '@react-native-community/cli-tools';\nimport fs from 'fs';\nimport path from 'path';\nimport {\n  cleanAssetCatalog,\n  getImageSet,\n  isCatalogAsset,\n  writeImageSet,\n} from './assetCatalogIOS';\nimport {AssetData} from './buildBundle';\nimport filterPlatformAssetScales from './filterPlatformAssetScales';\nimport getAssetDestPathAndroid from './getAssetDestPathAndroid';\nimport getAssetDestPathIOS from './getAssetDestPathIOS';\n\ninterface CopiedFiles {\n  [src: string]: string;\n}\n\nfunction saveAssets(\n  assets: AssetData[],\n  platform: string,\n  assetsDest: string | undefined,\n  assetCatalogDest: string | undefined,\n) {\n  if (!assetsDest) {\n    logger.warn('Assets destination folder is not set, skipping...');\n    return;\n  }\n\n  const filesToCopy: CopiedFiles = Object.create(null); // Map src -> dest\n\n  const getAssetDestPath =\n    platform === 'android' ? getAssetDestPathAndroid : getAssetDestPathIOS;\n\n  const addAssetToCopy = (asset: AssetData) => {\n    const validScales = new Set(\n      filterPlatformAssetScales(platform, asset.scales),\n    );\n\n    asset.scales.forEach((scale, idx) => {\n      if (!validScales.has(scale)) {\n        return;\n      }\n      const src = asset.files[idx];\n      const dest = path.join(assetsDest, getAssetDestPath(asset, scale));\n      filesToCopy[src] = dest;\n    });\n  };\n\n  if (platform === 'ios' && assetCatalogDest != null) {\n    // Use iOS Asset Catalog for images. This will allow Apple app thinning to\n    // remove unused scales from the optimized bundle.\n    const catalogDir = path.join(assetCatalogDest, 'RNAssets.xcassets');\n    if (!fs.existsSync(catalogDir)) {\n      logger.error(\n        `Could not find asset catalog 'RNAssets.xcassets' in ${assetCatalogDest}. Make sure to create it if it does not exist.`,\n      );\n      return;\n    }\n\n    logger.info('Adding images to asset catalog', catalogDir);\n    cleanAssetCatalog(catalogDir);\n    for (const asset of assets) {\n      if (isCatalogAsset(asset)) {\n        const imageSet = getImageSet(\n          catalogDir,\n          asset,\n          filterPlatformAssetScales(platform, asset.scales),\n        );\n        writeImageSet(imageSet);\n      } else {\n        addAssetToCopy(asset);\n      }\n    }\n    logger.info('Done adding images to asset catalog');\n  } else {\n    assets.forEach(addAssetToCopy);\n  }\n\n  return copyAll(filesToCopy);\n}\n\nfunction copyAll(filesToCopy: CopiedFiles) {\n  const queue = Object.keys(filesToCopy);\n  if (queue.length === 0) {\n    return Promise.resolve();\n  }\n\n  logger.info(`Copying ${queue.length} asset files`);\n  return new Promise<void>((resolve, reject) => {\n    const copyNext = (error?: NodeJS.ErrnoException) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      if (queue.length === 0) {\n        logger.info('Done copying assets');\n        resolve();\n      } else {\n        // queue.length === 0 is checked in previous branch, so this is string\n        const src = queue.shift() as string;\n        const dest = filesToCopy[src];\n        copy(src, dest, copyNext);\n      }\n    };\n    copyNext();\n  });\n}\n\nfunction copy(\n  src: string,\n  dest: string,\n  callback: (error: NodeJS.ErrnoException) => void,\n): void {\n  const destDir = path.dirname(dest);\n  fs.mkdir(destDir, {recursive: true}, (err?) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n    fs.createReadStream(src)\n      .pipe(fs.createWriteStream(dest))\n      .on('finish', callback);\n  });\n}\n\nexport default saveAssets;\n"]}